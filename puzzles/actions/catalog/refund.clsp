; refund.clsp by yakuhito
;; Responsible for returning invalid precommit coins.

;; A precommit coin is considered invalid if:
;; a) the CAT maker puzzle has changed
;; b) the amount is wrong
;; c) the tail hash has already been registered

(mod (
  PRECOMMIT_1ST_CURRY_HASH ; after 1st curry
  SLOT_1ST_CURRY_HASH ; after 1st curry
  Current_State ; Truth = (cat_maker_puzzle_hash . registration_price)
  ( 
    refund_info_hash
    precommited_cat_maker_reveal
    precommited_cat_maker_hash
    precommited_cat_maker_solution
    tail_hash ; full TAIL in the reveal of the pre-commit coin
    initial_nft_owner_ph ; also included in the pre-commit coin
    refund_puzzle_hash_hash ; used to compute precommit coin puzzle hash
    precommit_amount . ; amount of the pre-commit coin
    neighbors_hash ; (sha256sum (left_tail_hash . right_tail_hash))
  ) ; solution
)
  (include condition_codes.clib)
  (include secure_nft.clib)
  (include sha256tree.clib)
  (include slots.clib)

  (defun get_slot_value_hash (value neighbors_hash)
    (sha256 2 (sha256 1 value) neighbors_hash) 
  )

  (if (all
    (= 
      (sha256 2 precommited_cat_maker_hash (sha256tree precommited_cat_maker_solution))
      refund_info_hash
    )
    (= precommited_cat_maker_hash (sha256tree precommited_cat_maker_reveal))
    (> precommit_amount 0)
  )
    (c
      Current_State ; new state

      ; create NFT that will hold CAT info
      (list
        ; announcement
        (list
            CREATE_PUZZLE_ANNOUNCEMENT
            (concat '$'
                (sha256 2 
                    (sha256 1 tail_hash)
                    (sha256 1 initial_nft_owner_ph)
                ) ; (sha256tree (tail_hash . initial_nft_owner_ph))
            ) 
        )

        ; spend slot only if (a) and (b) are not met
        (if (all
          (= (r Current_State) precommit_amount)
          (= precommited_cat_maker_hash (f Current_State))
        )
          (spend_slot SLOT_1ST_CURRY_HASH (get_slot_value_hash tail_hash neighbors_hash))
          ; else
          (list REMARK)
        )
        
        ; consume precommit coin
        (list
          SEND_MESSAGE
          19 ; sender puzzle + receiver puzzle + receiver amount
          0 ; message = 0 = refund
          (a
            precommited_cat_maker_reveal
            (list
              (curry_hashes PRECOMMIT_1ST_CURRY_HASH
                refund_puzzle_hash_hash
                (sha256 1 refund_info_hash) ; hash of REFUND_INFO_HASH
                (sha256 2
                  (sha256 1 initial_nft_owner_ph)
                  tail_hash
                ) ; precommit coin reveal will be (c initial_nft_owner_ph TAIL)
              ) ; Inner_Puzzle_Hash
              precommited_cat_maker_solution
            )
          ) ; receiver puzzle hash
          precommit_amount
        ) 
      ) ; conditions
    )
    ; else
    (x)
  )
)
