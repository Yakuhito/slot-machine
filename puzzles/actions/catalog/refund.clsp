; refund.clsp by yakuhito
;; Responsible for returning invalid precommit coins.

;; A precommit coin is considered invalid if:
;; a) the CAT maker puzzle has changed
;; b) the amount is wrong
;; c) the tail hash has already been registered

(mod (
    PRECOMMIT_1ST_CURRY_HASH ; after 1st curry
    SLOT_1ST_CURRY_HASH ; after 1st curry
    (@
        Truth
        (
            Ephemeral_State . ; not used
            (@
                Current_State
                (Cat_Maker_Puzzle_Hash . Registration_Price)
            )
        )
    )
    (
        precommited_cat_maker_hash ; (sha256tree precommited_cat_maker_reveal)
        precommited_cat_maker_reveal
        precommited_cat_maker_solution
        tail_hash ; full TAIL in the reveal of the pre-commit coin
        initial_nft_owner_ph ; also included in the pre-commit coin
        refund_puzzle_hash_hash ; used to compute precommit coin puzzle hash
        precommit_amount . ; amount of the pre-commit coin
        neighbors ; (left_tail_hash . right_tail_hash)
    ) ; solution
)
    (include condition_codes.clib)
    (include sha256tree.clib)
    (include curry.clib)
    (include slots.clib)

    (defun main (SLOT_1ST_CURRY_HASH slot_value_hash slot_spend_needed base_conditions)
        (if slot_spend_needed
            (c 
                (spend_slot SLOT_1ST_CURRY_HASH slot_value_hash)
                (c 
                    (create_slot SLOT_1ST_CURRY_HASH slot_value_hash)
                    base_conditions
                )
            )
            ; else
            base_conditions
        )
    )

    (if (= precommited_cat_maker_hash (sha256tree precommited_cat_maker_reveal))
        (c
            Truth ; nothing changes
            (main 
                SLOT_1ST_CURRY_HASH
                (sha256tree (c tail_hash neighbors))
                (all
                    (= Registration_Price precommit_amount)
                    (= precommited_cat_maker_hash Cat_Maker_Puzzle_Hash)
                ) ; spend slot only if (a) and (b) are not met
                (list
                    ; announcement
                    (list
                        CREATE_PUZZLE_ANNOUNCEMENT
                        (concat '$'
                            (sha256tree (c tail_hash initial_nft_owner_ph))
                        ) 
                    )

                    ; consume precommit coin
                    (list
                        SEND_MESSAGE
                        19 ; sender puzzle + receiver puzzle + receiver amount
                        0 ; message = 0 = refund
                        (a
                            precommited_cat_maker_reveal
                            (c
                                (curry_hashes PRECOMMIT_1ST_CURRY_HASH
                                    refund_puzzle_hash_hash
                                    ; full precommit value reveal is (TAIL . HASH)
                                    ; where HASH = (sha256tree initial_nft_owner_ph cat_maker_hash . cat_maker_solution)
                                    (sha256 2
                                        tail_hash
                                        (sha256 1
                                            (sha256tree (c initial_nft_owner_ph (c precommited_cat_maker_hash precommited_cat_maker_solution)))
                                        )
                                    )
                                ) ; Inner_Puzzle_Hash
                                precommited_cat_maker_solution
                            )
                        ) ; receiver puzzle hash
                        precommit_amount
                      ) 
                ) ; base_conditions
            ) ; conditions
        )
        ; else
        (x)
    )
)
