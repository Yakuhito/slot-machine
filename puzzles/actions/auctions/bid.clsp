; bid.clsp by yakuhito & Rigidity

(mod (
    BID_PROGRAM ; Checks the pre-buyer's premium amount against the previous bid
        ; CHECK PREVIOUS BID > BID HERE
    TIMESTAMP_PROGRAM ; Adds conditions to the output of the action
        ; return: (new_state seconds is_relative)
    REFUND_PROGRAM
    (@ Current_State (Bid_Index Bid King End_State))
    solution ; (new_bid new_king)
)
    (include condition_codes.clib)

    (defun main ((Bid_Index Bid King End_State) (new_bid new_king) (end_new_state end_seconds end_is_relative))
        (if (a BID_PROGRAM (list Bid_Index Bid new_bid))
            (c
                (
                    (+ Bid_Index 1)
                    new_bid
                    new_king
                    end_new_state
                ) ; new state
                (list
                    (list
                        CREATE_PUZZLE_ANNOUNCEMENT
                        (sha256 2 (sha256 1 new_bid) (sha256 1 new_king))
                    ) ; create puzzle
                    (list -42
                        CREATE_COIN
                        King
                        (a REFUND_PROGRAM (list Bid_Index Bid))
                        (list King)
                    ) ; refund last bid
                    (i is_relative
                        (list ASSERT_BEFORE_SECONDS_RELATIVE end_seconds)
                        ; else
                        (list ASSERT_BEFORE_SECONDS_ABSOLUTE end_seconds)
                    )
                ) ; conditions
            )
            ; else
            (x)
        )
    )

    (main Current_State solution (a TIMESTAMP_PROGRAM (list Bid_Index End_State)))
)

; Auction with 1 hour sliding window
; Buyer's premium & commission
; Create a bid to replace the last one
; Assert before relative the sliding window
; Or assert before absolute the end time
; Check the bid amount against the last one
; Pay the buyer's premium on top of it in the new bid coin
