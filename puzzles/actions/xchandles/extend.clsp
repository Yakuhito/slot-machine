; extend.clsp by yakuhito
;; Used to extend the registration of a handle

;; Remember that the slot format is (value (left_value right_value) expiration . launcher_id)
;;  but we're only interested in 'expiration' (and handle to get correct price factor based on length)

(mod (
    CAT_MOD_HASH
    OFFER_MOD_HASH
    PAYOUT_PUZZLE_HASH
    SLOT_1ST_CURRY_HASH ; after 1st curry
    Current_State ; Truth = (cat_maker_puzzle_hash pricing_puzzle_hash . expired_handle_pricing_puzzle_hash)
    (
        handle
        pricing_puzzle_reveal
        pricing_solution
        cat_maker_puzzle_reveal
        cat_maker_solution
        neighbors_hash
        expiration . 
        launcher_id_hash
    )
)
    (include condition_codes.clib)
    (include sha256tree.clib)
    (include curry.clib)
    (include slots.clib)

    (defun get_slot_value_hash (handle neighbors_hash expiration launcher_id_hash)
        (sha256 2
            (sha256 1 (sha256 1 handle))
            (sha256 2
                neighbors_hash
                (sha256 2
                    (sha256 1 expiration)
                    launcher_id_hash
                )
            )
        )
    )

    (defun-inline main ((total_price . registered_time))
        (c
            Current_State ; new state
            (list
                ; spend slot
                (spend_slot SLOT_1ST_CURRY_HASH 
                    (get_slot_value_hash handle neighbors_hash expiration launcher_id_hash)
                )

                ; announcement
                (list CREATE_PUZZLE_ANNOUNCEMENT (concat 'e' (sha256 2 (sha256 1 total_price) (sha256 1 handle))))
                
                ; create new slot
                (create_slot SLOT_1ST_CURRY_HASH
                    (get_slot_value_hash
                        handle
                        neighbors_hash
                        (+ expiration registered_time)
                        launcher_id_hash
                    )
                ) 
                
                ; assert payment
                (list
                    ASSERT_PUZZLE_ANNOUNCEMENT
                    (sha256
                        (a 
                            cat_maker_puzzle_reveal
                            (list OFFER_MOD_HASH cat_maker_solution)
                        ) ; full CAT puzzle hash
                        (sha256tree 
                            (list
                                (sha256tree (c handle expiration)) ; nonce
                                (list PAYOUT_PUZZLE_HASH total_price) ; notarized payment
                            )
                        )
                    )
                )
            ) ; conditions
        )
    )

    (if (all
        (= (f Current_State) (sha256tree (f cat_maker_solution))) ; cat maker puzzle reveal is correct
        (= (f (r Current_State)) (sha256tree (f pricing_puzzle_reveal))) ; pricing puzzle reveal is correct
    )
        (main
            (a pricing_puzzle_reveal (list handle pricing_solution))
        )
        ; else
        (x)
    )
)