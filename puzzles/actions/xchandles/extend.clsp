; extend.clsp by yakuhito
;; Used to extend the registration of a handle

;; Remember that the slot format is (value (left_value right_value) expiration owner_launcher_id . resolved_launcher_id)
;;  but we're only interested in 'expiration' (and handle to get correct price factor based on length)

(mod (
    OFFER_MOD_HASH
    PAYOUT_PUZZLE_HASH
    SLOT_1ST_CURRY_HASH ; after 1st curry
    (@ Truth
        (
            Ephemeral_State .
            (@
                Current_State
                (Cat_Maker_Puzzle_Hash Pricing_Puzzle_Hash . Expired_Handle_Pricing_Puzzle_Hash)
            )
        )
    )
    (
        handle_hash
        pricing_puzzle_reveal
        (@ pricing_solution (expiration handle))
        cat_maker_puzzle_reveal
        cat_maker_solution
        neighbors_hash . 
        rest_hash
    )
)
    (include condition_codes.clib)
    (include sha256tree.clib)
    (include curry.clib)
    (include slots.clib)

    (defun get_slot_value_hash (handle_hash neighbors_hash expiration rest_hash)
        (sha256 2
            (sha256 1 handle_hash) ; value = handle_hash; we need (sha256tree value) here
            (sha256 2
                neighbors_hash
                (sha256 2
                    (sha256 1 expiration)
                    rest_hash
                )
            )
        )
    )

    (defun-inline main ((total_price . registered_time))
        (c
            Truth
            (list
                ; spend slot
                (spend_slot_inline SLOT_1ST_CURRY_HASH 
                    (get_slot_value_hash handle_hash neighbors_hash expiration rest_hash)
                )

                ; announcement
                (list CREATE_PUZZLE_ANNOUNCEMENT (concat 'e' (sha256 2 (sha256 1 total_price) handle_hash)))
                
                ; can't extend if expired
                (list ASSERT_BEFORE_SECONDS_ABSOLUTE expiration)

                ; create new slot
                (create_slot_inline SLOT_1ST_CURRY_HASH
                    (get_slot_value_hash
                        handle_hash
                        neighbors_hash
                        (+ expiration registered_time)
                        rest_hash
                    )
                    handle_hash
                ) 
                
                ; assert payment
                (list
                    ASSERT_PUZZLE_ANNOUNCEMENT
                    (sha256
                        (a 
                            cat_maker_puzzle_reveal
                            (c OFFER_MOD_HASH cat_maker_solution)
                        ) ; full CAT puzzle hash
                        (sha256tree 
                            (list
                                (sha256 2 handle_hash (sha256 1 expiration)) ; nonce = (sha256tree (c handle expiration))
                                (list PAYOUT_PUZZLE_HASH total_price) ; notarized payment
                            )
                        )
                    )
                )
            ) ; conditions
        )
    )

    (if (all
        (= Cat_Maker_Puzzle_Hash (sha256tree cat_maker_puzzle_reveal)) ; cat maker puzzle reveal is correct
        (= Pricing_Puzzle_Hash (sha256tree pricing_puzzle_reveal)) ; pricing puzzle reveal is correct
        (= handle_hash (sha256 1 handle)) ; pricing_solution Handle truth
    )
        (main
            (a pricing_puzzle_reveal pricing_solution)
        )
        ; else
        (x)
    )
)