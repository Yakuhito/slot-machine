; expire.clsp by yakuhito
;; When a handle expires, it goes into an 'auction' where the price is controlled by a puzzle
;;   in the registry's state.

;; Remember that the slot format is (c (c handle_hash (c left right)) (c expiration (c owner resolved)))

(mod (
    PRECOMMIT_1ST_CURRY_HASH ; after 1st curry
    SLOT_1ST_CURRY_HASH ; after 1st curry
    (@ Truth
        (
            Ephemeral_State .
            (@
                Current_State
                (Cat_Maker_Puzzle_Hash Pricing_Puzzle_Hash . Expired_Handle_Pricing_Puzzle_Hash)
            )
        )
    )
    (
        cat_maker_puzzle_reveal
        cat_maker_puzzle_solution
        expired_handle_pricing_puzzle_reveal
        (@ expired_handle_pricing_puzzle_solution (buy_time current_expiration handle . rest_maybe))
        refund_puzzle_hash_hash
        secret
        neighbors ; (c left right)
        old_rest . ; (c old_owner_launcher_id old_resolved_data)
        (@ new_rest (new_owner_launcher_id . new_resolved_data))
    )
)
    (include condition_codes.clib)
    (include sha256tree.clib)
    (include xchandles.clib)
    (include curry.clib)
    (include slots.clib)

    (defun spend_precommit_coin_and_announce (
        cat_maker_puzzle_reveal
        cat_maker_puzzle_solution
        total_price
        precommit_coin_inner_ph
        base_conditions
    )
        (c
            (list
                SEND_MESSAGE
                19 ; sender puzzle + receiver puzzle + receiver amount
                1 ; message = 1 = spend to payout puzzle hash
                (a
                    cat_maker_puzzle_reveal
                    (c
                        precommit_coin_inner_ph ; Inner_Puzzle_Hash
                        cat_maker_puzzle_solution
                    )
                )
                total_price
            )
            (c 
                (list CREATE_PUZZLE_ANNOUNCEMENT (concat 'x' precommit_coin_inner_ph))
                base_conditions
            )
        )
    )
    
    (defun-inline main (
        handle_hash
        (total_price . registered_time)
    )
        (c
            Truth ; nothing changes
            (spend_precommit_coin_and_announce
                cat_maker_puzzle_reveal
                cat_maker_puzzle_solution
                total_price
                (curry_hashes_inline PRECOMMIT_1ST_CURRY_HASH
                    refund_puzzle_hash_hash
                    (sha256tree
                        (c
                            (sha256tree (c
                                (c Cat_Maker_Puzzle_Hash cat_maker_puzzle_solution)
                                (c Expired_Handle_Pricing_Puzzle_Hash expired_handle_pricing_puzzle_solution)
                            )) ; REFUND_INFO = (sha256tree (c (c cat_maker_reveal cat_maker_solution) (c pricing_puzzle_reveal pricing_solution)))
                            (c
                                (c secret handle)
                                (c buy_time new_rest)
                            ) ; data = (c (c secret handle) (c start_time (c new_owner_launcher_id new_resolved_data))))
                        )
                    ) ; precommit coin value = (c REFUND_INFO data)
                ) ; precommit coin inner puzzle hash
                (list
                    (list ASSERT_SECONDS_ABSOLUTE buy_time)

                    ; assert handle actually expired
                    (list ASSERT_SECONDS_ABSOLUTE current_expiration)

                    ; spend slot
                    (spend_slot_inline SLOT_1ST_CURRY_HASH 
                        (get_xchandles_slot_value_hash handle_hash neighbors current_expiration old_rest)
                    )
                    
                    ; create new slot
                    (create_slot_inline SLOT_1ST_CURRY_HASH
                        (get_xchandles_slot_value_hash handle_hash neighbors (+ registered_time buy_time) new_rest)
                    )
                ) ; base conditions
            ) ; conditions
        )
    )

    (if (all
        (= (sha256tree cat_maker_puzzle_reveal) Cat_Maker_Puzzle_Hash)
        (= (sha256tree expired_handle_pricing_puzzle_reveal) Expired_Handle_Pricing_Puzzle_Hash)
        (= (strlen new_resolved_data) 32)
        (> 65 (strlen new_resolved_data))
    )
        (main
            (sha256 1 handle)
            (a expired_handle_pricing_puzzle_reveal expired_handle_pricing_puzzle_solution)
        )
        ; else
        (x)
    )
)