; update.clsp by yakuhito
;; Used to update the owner_launcher_id and/or resolved_data of a record

;; Note: The update is final.

(mod (
    SINGLETON_MOD_HASH
    SINGLETON_LAUNCHER_PUZZLE_HASH
    SLOT_1ST_CURRY_HASH ; after 1st curry
    (@ Truth
        (
            Ephemeral_State .
            (@
                Current_State
                (Cat_Maker_Puzzle_Hash Pricing_Puzzle_Hash . Expired_Handle_Pricing_Puzzle_Hash)
            )
        )
    )
    (
        (@
            current_slot
            (
                (handle_hash . neighbors) .
                (expiration . (@ current_data (current_owner_launcher_id . current_resolved_data)))
            )
        )
        (@ new_data (new_owner_launcher_id . new_resolved_data)) .
        announcer_inner_puzzle_hash
    )
)
    (include condition_codes.clib)
    (include sha256tree.clib)
    (include xchandles.clib)
    (include curry.clib)
    (include slots.clib)

    (if (all
        (= (strlen new_owner_launcher_id) 32)
        (> 65 (strlen new_resolved_data))
    )
        (c
            Truth
            (list
                ; can't update if expired
                (list ASSERT_BEFORE_SECONDS_ABSOLUTE expiration)

                ; spend slot
                (spend_slot_inline SLOT_1ST_CURRY_HASH 
                    (sha256tree current_slot)
                )

                ; create new slot
                (create_slot_inline SLOT_1ST_CURRY_HASH
                    (get_xchandles_slot_value_hash
                        handle_hash
                        neighbors
                        expiration
                        new_data
                    )
                )

                ; assert message from current owner
                (list
                    RECEIVE_MESSAGE
                    18 ; puzzle-puzzle
                    (sha256tree (c handle_hash new_data))
                    (curry_hashes_inline SINGLETON_MOD_HASH
                        (sha256tree
                            (c SINGLETON_MOD_HASH (c current_owner_launcher_id SINGLETON_LAUNCHER_PUZZLE_HASH))
                        ) ; tree hash of announcer SINGLETON_STRUCT
                        announcer_inner_puzzle_hash
                    )
                )
            )
        )
        ; else
        (x)
    )
)