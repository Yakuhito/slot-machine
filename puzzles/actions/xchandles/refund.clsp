; refund.clsp by yakuhito
;; Responsible for returning (i.e., sending back locked value from) invalid precommit coins.

;; A precommit coin is considered invalid if:
;; a) the CAT maker puzzle has changed
;; b) the amount is wrong
;; c) the pricing puzzle has changed
;; d) the handle has already been registered

(mod (
    PRECOMMIT_1ST_CURRY_HASH ; after 1st curry
    SLOT_1ST_CURRY_HASH ; after 1st curry
    (@ Truth
        (
            Ephemeral_State .
            (@
                Current_State
                (Cat_Maker_Puzzle_Hash Pricing_Puzzle_Hash . Expired_Handle_Pricing_Puzzle_Hash)
            )
        )
    )
    (
        precommited_cat_maker_reveal
        precommited_cat_maker_reveal_hash
        precommited_cat_maker_solution
        precommited_pricing_puzzle_reveal
        precommited_pricing_puzzle_reveal_hash
        precommited_pricing_puzzle_solution
        handle
        secret
        precommited_owner_launcher_id
        precommited_resolved_data
        refund_puzzle_hash_hash
        precommit_amount . ; amount of the pre-commit coin
        (@ slot_value ((handle_hash . rest1) . rest2))
    )
)
    (include condition_codes.clib)
    (include sha256tree.clib)
    (include xchandles.clib)
    (include curry.clib)
    (include slots.clib)

    (defun main (
        SLOT_1ST_CURRY_HASH
        slot_value_hash
        slot_spend_needed
        precommit_puzzle_hash
        precommit_amount
    )
        (c
            ; consume precommit coin
            (list
                SEND_MESSAGE
                19 ; sender puzzle + receiver puzzle + receiver amount
                0 ; message = 0 = refund
                precommit_puzzle_hash
                precommit_amount
            )
            (c
                ; announcement
                (list
                    CREATE_PUZZLE_ANNOUNCEMENT
                    (concat '$' precommit_puzzle_hash)
                )
                (if slot_spend_needed
                    (list
                        (spend_slot_inline SLOT_1ST_CURRY_HASH slot_value_hash)
                        (create_slot_inline SLOT_1ST_CURRY_HASH slot_value_hash)
                    )
                    ; else
                    ()
                )
            )
        )
    )

    (if (all
        (= precommited_cat_maker_reveal_hash (sha256tree precommited_cat_maker_reveal))
        (= precommited_pricing_puzzle_reveal_hash (sha256tree precommited_pricing_puzzle_reveal))
        (if slot_value (= handle_hash (sha256 1 handle)) 1)
    )
        (c
            Truth
            (main
                SLOT_1ST_CURRY_HASH
                (sha256tree slot_value)
                (all
                    ; not (a)
                    (= precommited_cat_maker_reveal_hash Cat_Maker_Puzzle_Hash)
                    ; not (b)
                    (if (= precommited_pricing_puzzle_reveal_hash Pricing_Puzzle_Hash)
                        (= handle (f (r precommited_pricing_puzzle_solution)))
                        ; else
                        (if (= precommited_pricing_puzzle_reveal_hash Expired_Handle_Pricing_Puzzle_Hash)
                            (= handle (f (r (r precommited_pricing_puzzle_solution))))
                            ; else
                            ()
                        )
                    )
                    ; not (c)
                    (= precommit_amount (f (a precommited_pricing_puzzle_reveal precommited_pricing_puzzle_solution)))
                ) ; slot spend needed if (a), (b), and (c) are not met - we need (d)
                (a
                    precommited_cat_maker_reveal
                    (c
                        (curry_hashes_inline PRECOMMIT_1ST_CURRY_HASH
                            refund_puzzle_hash_hash
                            (sha256 1 (xchandles_precommitment_value
                                precommited_cat_maker_reveal_hash
                                precommited_cat_maker_solution
                                precommited_pricing_puzzle_reveal_hash
                                precommited_pricing_puzzle_solution
                                handle
                                secret
                                precommited_owner_launcher_id
                                precommited_resolved_data
                            )) ; hash of precommit value, which is itself a hash :)
                        ) ; Inner_Puzzle_Hash
                        precommited_cat_maker_solution
                    )
                ) ; receiver puzzle hash
                precommit_amount
            ) ; conditions
        )
        ; else
        (x)
    )
)