; register.clsp by yakuhito
;; Responsible for registering new handles into the handle registry (XCHandles)

;; Unlike CATalog, a slot's value is (c (c handle_hash (c left right)) (c expiration (c owner resolved))) where:
;;  value is the slot 'key'/id and is defined as (sha256 1 handle) / (sha256tree handle)
;;  left_value/right_value are the keys of the slot's neighbors
;;  expiration is a timestamp that says when the handle will expire
;;  owner is a 32-byte launcher id that specifies the owner of the record, who can
;;       update the owner_launcher (i.e., transfer the handle) and resolved_data
;;  resolved_data is a value consiting of 0-64 bytes that specifies arbitrarty data
;;       for XCHandles, for example. resolved_data may be a 32-byte launcher id of a name NFT
;;       in the future, resolved_data might point to a namespace/sub-registry, for example

;; Also note that anyone can extend a handle registration, but only the owner can transfer the
;;   record or change the resolved_data

(mod (
    PRECOMMIT_1ST_CURRY_HASH ; after 1st curry
    SLOT_1ST_CURRY_HASH ; after 1st curry
    (@ Truth
        (
            Ephemeral_State .
            (@
                Current_State
                (Cat_Maker_Puzzle_Hash Pricing_Puzzle_Hash . Expired_Handle_Pricing_Puzzle_Hash)
            )
        )
    )
    ; pricing_solution's first element MUST be handle_reveal
    (
        pricing_puzzle_reveal
        (@ pricing_solution (this_is_zero handle . solution_rest))
        cat_maker_puzzle_reveal
        cat_maker_solution
        ; start neighbor slots info
        left_value
        left_left_value
        left_expiration
        left_owner_launcher_id
        left_resolved_data
        right_value
        right_right_value
        right_expiration
        right_owner_launcher_id
        right_resolved_data
        ; end neighbor slots info
        start_time
        owner_launcher_id
        resolved_data
        ; info needed to compute precommit coin puzzle hash
        refund_puzzle_hash_hash
        secret_hash
    )
)
    (include condition_codes.clib)
    (include sha256tree.clib)
    (include xchandles.clib)
    (include curry.clib)
    (include slots.clib)

    (defun-inline main ((total_price . registered_time))
        (list
            (list ASSERT_SECONDS_ABSOLUTE start_time)
            
            ; spend left slot
            (spend_slot_inline SLOT_1ST_CURRY_HASH 
                (get_xchandles_slot_value_hash left_value left_left_value right_value left_data_hash)
            )
            ; spend right slot
            (spend_slot_inline SLOT_1ST_CURRY_HASH
                (get_xchandles_slot_value_hash right_value left_value right_right_value right_data_hash)
            )
            
            ; create new slot
            (create_slot_inline SLOT_1ST_CURRY_HASH
                (get_slot_value_hash
                    handle_hash
                    left_value
                    right_value
                    (sha256 2 
                        (sha256 1 (+ start_time registered_time))
                        rest_data_hash
                    ) ; sha256tree data
                )
                handle_hash
            )

            ; create new left slot
            (create_slot_inline SLOT_1ST_CURRY_HASH 
                (get_slot_value_hash left_value left_left_value handle_hash left_data_hash)
                left_value
            ) 
            ; create new right slot
            (create_slot_inline SLOT_1ST_CURRY_HASH
                (get_slot_value_hash right_value handle_hash right_right_value right_data_hash)
                right_value
            )

            ; announcement
            (list
                CREATE_PUZZLE_ANNOUNCEMENT
                (concat 'r'
                    (sha256 2 
                        handle_hash
                        (sha256 2
                            (sha256 1 (+ registered_time start_time))
                            rest_data_hash
                        )
                    ) ; (sha256tree (handle new_expiration new_owner_launcher_id . new_resolved_launcher_id))
                ) 
            )
            
            ; consume precommit coin
            (list
                SEND_MESSAGE
                19 ; sender puzzle + receiver puzzle + receiver amount
                1 ; message = 1 = spend to payout puzzle hash
                (a
                    cat_maker_puzzle_reveal
                    (c
                        (curry_hashes_inline PRECOMMIT_1ST_CURRY_HASH
                            refund_puzzle_hash_hash
                            (sha256 1 (xchandles_precommitment_value
                                Cat_Maker_Puzzle_Hash
                                cat_maker_solution
                                Pricing_Puzzle_Hash
                                pricing_solution_hash
                                handle
                                secret
                                start_time
                                owner_launcher_id
                                resolved_launcher_id
                            ))
                            (sha256 2
                                (sha256 1
                                    (sha256 2
                                        (sha256 2  (sha256tree ))
                                        (sha256 2  )
                                    ) ; refund_info_hash where REFUND_INFO = (c (c cat_maker_reveal cat_maker_solution) (c pricing_puzzle_reveal pricing_solution))
                                ) ; hash of refund_info_hash
                                (sha256 2
                                    (sha256 2 
                                        secret_hash
                                        handle_hash
                                    )
                                    (sha256 2
                                        (sha256 1 start_time)
                                        rest_data_hash
                                    )
                                )
                            ) ; data in precommit coin reveal will be (c refund_info_hash (c (c secret handle) (c start_time (c new_owner_launcher_id new_resolved_launcher_id))))))
                        ) ; Inner_Puzzle_Hash
                        cat_maker_solution
                    )
                )
                total_price
            )
        ) ; conditions
    )

    (if (all
            (= handle_hash (sha256 1 (f (r pricing_solution))))
            (not this_is_zero) ; Current_Expiry = 0 since handle is being registered
            (>s handle_hash left_value)
            (>s right_value handle_hash)
            (= Cat_Maker_Puzzle_Hash (sha256tree cat_maker_puzzle_reveal)) ; cat maker puzzle reveal is correct
            (= Pricing_Puzzle_Hash (sha256tree pricing_puzzle_reveal)) ; pricing puzzle reveal is correct
            (= (strlen owner_launcher_id) 32)
            (> 65 (strlen resolved_data))
        )
        (c
            Truth ; new ephemeral state and state
            (main
                (a pricing_puzzle_reveal pricing_solution)
            ) ; conditions
        )
        ; else
        (x)
    )
)