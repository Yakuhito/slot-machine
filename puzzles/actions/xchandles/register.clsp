; register.clsp by yakuhito
;; Responsible for registering new handles into the handle registry (XCHandles)

;; Unlike CATalog, a slot's value is (c (c handle_hash (c left right)) (c expiration (c owner resolved))) where:
;;  value is the slot 'key'/id and is defined as (sha256 1 handle) / (sha256tree handle)
;;  left_value/right_value are the keys of the slot's neighbors
;;  expiration is a timestamp that says when the handle will expire
;;  owner is a 32-byte launcher id that specifies the owner of the record, who can
;;       update the owner_launcher (i.e., transfer the handle) and resolved_data
;;  resolved_data is a value consiting of 0-64 bytes that specifies arbitrarty data
;;       for XCHandles, for example. resolved_data may be a 32-byte launcher id of a name NFT
;;       in the future, resolved_data might point to a namespace/sub-registry, for example

;; Also note that anyone can extend a handle registration, but only the owner can transfer the
;;   record or change the resolved_data

(mod (
    PRECOMMIT_1ST_CURRY_HASH ; after 1st curry
    SLOT_1ST_CURRY_HASH ; after 1st curry
    (@ Truth
        (
            Ephemeral_State .
            (@
                Current_State
                (Cat_Maker_Puzzle_Hash Pricing_Puzzle_Hash . Expired_Handle_Pricing_Puzzle_Hash)
            )
        )
    )
    ; pricing_solution has 3 Truths: Start_Time, Current_Expiration, and Handle_Reveal
    (
        handle_hash
        pricing_puzzle_reveal
        (@ pricing_solution (start_time this_is_zero handle . solution_rest))
        cat_maker_puzzle_reveal
        cat_maker_solution
        ; start neighbor slots info
        (@ neighbors (left_value . right_value))
        left_left_value
        left_expiration
        left_data
        right_right_value
        right_expiration
        right_data
        ; end neighbor slots info
        (@ data (owner_launcher_id . resolved_data))
        ; info needed to compute precommit coin puzzle hash
        refund_puzzle_hash_hash
        secret
    )
)
    (include condition_codes.clib)
    (include sha256tree.clib)
    (include xchandles.clib)
    (include curry.clib)
    (include slots.clib)

    (defun consume_precommit_and_announce (
        precommit_puzzle_hash
        precommit_amount
        base_conditions
    )
        (c
            ; consume precommit coin
            (list
                SEND_MESSAGE
                19 ; sender puzzle + receiver puzzle + receiver amount
                1 ; message = 1 = spend to payout puzzle hash
                precommit_puzzle_hash
                precommit_amount
            )
            (c 
                ; announcement
                (list
                    CREATE_PUZZLE_ANNOUNCEMENT
                    (concat 'r' precommit_puzzle_hash) 
                )
                base_conditions
            )
        )
    )

    (defun-inline main ((total_price . registered_time))
        (consume_precommit_and_announce
            (a
                cat_maker_puzzle_reveal
                (c
                    (curry_hashes_inline PRECOMMIT_1ST_CURRY_HASH
                        refund_puzzle_hash_hash
                        (sha256 1 (xchandles_precommitment_value
                            Cat_Maker_Puzzle_Hash
                            cat_maker_solution
                            Pricing_Puzzle_Hash
                            pricing_solution
                            handle
                            secret
                            owner_launcher_id
                            resolved_data
                        ))
                    ) ; Inner_Puzzle_Hash
                    cat_maker_solution
                )
            ) ; precommit_puzzle_hash
            total_price ; precommit_amount
            (list
                (list ASSERT_SECONDS_ABSOLUTE start_time)
                
                ; spend left slot
                (spend_slot_inline SLOT_1ST_CURRY_HASH 
                    (get_xchandles_slot_value_hash left_value (c left_left_value right_value) left_expiration left_data)
                )
                ; spend right slot
                (spend_slot_inline SLOT_1ST_CURRY_HASH
                    (get_xchandles_slot_value_hash right_value (c left_value right_right_value) right_expiration right_data)
                )
                
                ; create new slot
                (create_slot_inline SLOT_1ST_CURRY_HASH
                    (get_xchandles_slot_value_hash
                        handle_hash
                        neighbors
                        (+ start_time registered_time)
                        data
                    )
                )

                ; create new left slot
                (create_slot_inline SLOT_1ST_CURRY_HASH 
                    (get_xchandles_slot_value_hash left_value (c left_left_value handle_hash) left_expiration left_data)
                ) 
                ; create new right slot
                (create_slot_inline SLOT_1ST_CURRY_HASH
                    (get_xchandles_slot_value_hash right_value (c handle_hash right_right_value) right_expiration right_data)
                )
            ) ; base_conditions
        )
    )

    (if (all
            (= handle_hash (sha256 1 handle))
            (not this_is_zero) ; Current_Expiry = 0 since handle is being registered
            (>s handle_hash left_value)
            (>s right_value handle_hash)
            (= Cat_Maker_Puzzle_Hash (sha256tree cat_maker_puzzle_reveal)) ; cat maker puzzle reveal is correct
            (= Pricing_Puzzle_Hash (sha256tree pricing_puzzle_reveal)) ; pricing puzzle reveal is correct
            (= (strlen owner_launcher_id) 32)
            (> 65 (strlen resolved_data))
        )
        (c
            Truth ; new ephemeral state and state
            (main
                (a pricing_puzzle_reveal pricing_solution)
            ) ; conditions
        )
        ; else
        (x)
    )
)