; remove_mirror.clsp by yakuhito
;; Stops rewarding a specific mirror.

(mod (
    SINGLETON_MOD_HASH
    VALIDATOR_SINGLETON_STRUCT_HASH ; (sha256 SINGLETON_STRUCT) for validator singleton
    MIRROR_SLOT_1ST_CURRY_HASH ; after 1st curry
    MAX_SECONDS_OFFSET ; at most this amount of seconds can pass since last update
    ; /\ this prevents the reward distributor from 'stealing' earned rewards while not
    ;    dropping the remove mirror tx from the mempool after each block
    (@
        Current_State
        (
            total_reserves
            active_shares .
            (@ Current_State_Rest
                (@ Reward_Info (cumulative_payout . remaining_rewards))
                (@ Round_Time_Info (last_update . epoch_end))
            )
        )
    ) ; Truth
    Ephemeral_State ; not used
    (
        validator_singleton_inner_puzzle_hash
        mirror_payout_amount
        mirror_payout_puzzle_hash
        mirror_initial_cumulative_payout .
        mirror_shares
    )
)
    (include condition_codes.clib)
    (include curry.clib)
    (include slots.clib)

    (if (= mirror_payout_amount (* (- cumulative_payout mirror_initial_cumulative_payout) mirror_shares))
        (list
            (c
                (- total_reserves mirror_payout_amount)
                (c
                    (- active_shares mirror_shares)
                    Current_State_Rest
                )
            ) ; new state
            () ; new ephemeral state
            (list
                ; validator actually wants us to add this mirror
                (list RECEIVE_MESSAGE
                    18 ; puzzle hash - puzzle hash
                    (concat 'r' (sha256 2
                        (sha256 1 mirror_payout_puzzle_hash)
                        (sha256 1 mirror_shares)
                    )) ; message = 'r' + (sha265tree (mirror_payout_puzzle_hash . mirror_shares))
                    (curry_hashes_inline SINGLETON_MOD_HASH
                        VALIDATOR_SINGLETON_STRUCT_HASH
                        validator_singleton_inner_puzzle_hash
                    )
                )

                ; make sure the reward info is up to date
                (list ASSERT_BEFORE_SECONDS_ABSOLUTE (+ last_update MAX_SECONDS_OFFSET))

                ; spend mirror reward slot without recreating it
                (spend_slot_inline MIRROR_SLOT_1ST_CURRY_HASH
                    (sha256 2
                        (sha256 1 mirror_payout_puzzle_hash)
                        (sha256 2
                            (sha256 1 mirror_initial_cumulative_payout)
                            (sha256 1 mirror_shares)
                        )
                    ) ; slot value = (payout_puzzle_hash initial_cumulative_payout . shares)
                )

                ; leading -42 -> condition will be returned by the reserve
                (list -42
                    CREATE_COIN
                    mirror_payout_puzzle_hash
                    mirror_payout_amount
                    (list mirror_payout_puzzle_hash)
                )
            ) ; conditions
        )
        ; else
        (x)
    )
)