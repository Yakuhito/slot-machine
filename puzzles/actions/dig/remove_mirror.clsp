; remove_mirror.clsp by yakuhito
;; Stops rewarding a specific mirror.

(mod (
    SINGLETON_MOD_HASH
    VALIDATOR_SINGLETON_STRUCT_HASH ; (sha256 SINGLETON_STRUCT) for validator singleton
    MIRROR_SLOT_1ST_CURRY_HASH ; after 1st curry
    MAX_SECONDS_OFFSET ; at most this amount of seconds can pass since last update
    ; /\ this prevents the reward distributor from 'stealing' earned rewards while not
    ;    dropping the remove mirror tx from the mempool after each block
    (total_reserves active_shares reward_info current_round_info) ; Current_State
    (
        validator_singleton_inner_puzzle_hash
        mirror_payout_puzzle_hash .
        mirror_shares
    )
)
    (include condition_codes.clib)
    (include curry.clib)
    (include slots.clib)

    (c
        (list
            total_reserves
            (- active_shares mirror_shares)
            reward_info
            current_round_info
        ) ; new state  
        (list
            ; validator actually wants us to add this mirror
            (list RECEIVE_MESSAGE
                18 ; puzzle hash - puzzle hash
                (concat 'r' (sha256 2
                    (sha256 1 mirror_payout_puzzle_hash)
                    (sha256 1 mirror_shares)
                )) ; message = 'r' + (sha265tree (mirror_payout_puzzle_hash . mirror_shares))
                (curry_hashes_inline SINGLETON_MOD_HASH
                    VALIDATOR_SINGLETON_STRUCT_HASH
                    validator_singleton_inner_puzzle_hash
                )
            )

            ; make sure the reward info is up to date
            (list ASSERT_BEFORE_SECONDS_ABSOLUTE (+ (f current_round_info) MAX_SECONDS_OFFSET))

            (spend_slot MIRROR_SLOT_1ST_CURRY_HASH
                (sha256 2
                    (sha256 1 mirror_payout_puzzle_hash)
                    (sha256 2
                        (sha256 1 (f reward_info)) ; mirror fully paid out
                        (sha256 1 mirror_shares)
                    )
                ) ; slot value = (payout_puzzle_hash initial_cumulative_payout . shares)
            )
        ) ; conditions
    )
        
)