; add_mirror.clsp by yakuhito
;; Adds a mirror to the reward distributor. The mirror starts accumulating rewards right away.

(mod (
    SINGLETON_MOD_HASH
    VALIDATOR_SINGLETON_STRUCT_HASH ; (sha256 SINGLETON_STRUCT) for validator singleton
    MIRROR_SLOT_1ST_CURRY_HASH ; after 1st curry
    MAX_SECONDS_OFFSET ; at most this amount of seconds can pass since last update
    ; /\ this prevents the reward distributor from 'stealing' earned rewards before MAX_SECONDS_OFFSET by
    ;    adding a mirror with a gazillion shares during long periods of non-sync
    (@
        Current_State
        (
            total_reserves
            active_shares
            (@ Reward_Info (cumulative_payout . remaining_rewards))
            (@ Round_Time_Info (last_update . epoch_end))
        )
    ) ; Truth
    Ephemeral_State ; not used
    (
        validator_singleton_inner_puzzle_hash
        mirror_payout_puzzle_hash .
        mirror_shares
    )
)
    (include condition_codes.clib)
    (include curry.clib)
    (include slots.clib)

    (list
        (list
            total_reserves
            (+ active_shares mirror_shares)
            Reward_Info
            Round_Time_Info
        ) ; new state  
        ()
        (list
            ; validator actually wants us to add this mirror
            (list RECEIVE_MESSAGE
                18 ; puzzle hash - puzzle hash
                (concat 'a' (sha256 2
                    (sha256 1 mirror_payout_puzzle_hash)
                    (sha256 1 mirror_shares)
                )) ; message = 'a' + (sha265tree (mirror_payout_puzzle_hash . mirror_shares))
                (curry_hashes_inline SINGLETON_MOD_HASH
                    VALIDATOR_SINGLETON_STRUCT_HASH
                    validator_singleton_inner_puzzle_hash
                )
            )

            (create_slot_inline MIRROR_SLOT_1ST_CURRY_HASH
                (sha256 2
                    (sha256 1 mirror_payout_puzzle_hash)
                    (sha256 2
                        (sha256 1 cumulative_payout)
                        (sha256 1 mirror_shares)
                    )
                ) ; slot value = (payout_puzzle_hash initial_cumulative_payout . shares)
                mirror_payout_puzzle_hash
            )

            ; make sure the reward info is up to date
            (list ASSERT_BEFORE_SECONDS_ABSOLUTE (+ last_update MAX_SECONDS_OFFSET))
        ) ; conditions
    )
        
)