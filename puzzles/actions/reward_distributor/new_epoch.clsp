; new_epoch.clsp by yakuhito
;; Starts a new epoch

(mod (
    REWARD_SLOT_1ST_CURRY_HASH ; after 1st curry
    FEE_PAYOUT_PUZZLE_HASH
    FEE_BPS ; * epoch_total_rewards / 10000 will be given to the validator - rest is distributed to mirrors
    EPOCH_SECONDS
    (
        Ephemeral_State . ; not used
        (@ Current_State
            (
                total_reserves
                active_shares
                (cumulative_payout . remaining_rewards)
                (last_update . epoch_end)
            ) 
        ) ; truth
    )
    (
        slot_epoch_time
        slot_next_epoch_initialized
        slot_total_rewards
        epoch_total_rewards .
        fee
    )
)
    (include condition_codes.clib)
    (include curry.clib)
    (include slots.clib)

    (defun-inline slot_oracle (SLOT_1ST_CURRY_HASH slot_value_hash hint)
        (list
            (spend_slot_inline SLOT_1ST_CURRY_HASH slot_value_hash)
            (create_slot_with_hint_inline SLOT_1ST_CURRY_HASH slot_value_hash hint)
        )
    )

    (if (all (= last_update epoch_end)
        (= (/ (* epoch_total_rewards FEE_BPS) 10000) fee)
        (any
            (all (= slot_epoch_time epoch_end) (= epoch_total_rewards slot_total_rewards)) ; slot contains info about next epoch
            (all (> epoch_end slot_epoch_time) (not slot_next_epoch_initialized) (= epoch_total_rewards 0)) ; slot is for previous epoch; next epoch is 0
        )
    )
        (c
            (list
                Ephemeral_State ; new ephemeral state
                (- total_reserves fee)
                active_shares
                (c
                    cumulative_payout
                    (+ remaining_rewards (- epoch_total_rewards fee))
                )
                (c epoch_end (+ epoch_end EPOCH_SECONDS))
            ) ; new state 
            (c
                (list
                    CREATE_PUZZLE_ANNOUNCEMENT
                    (concat 'e'
                        (sha256 1 epoch_end) ; (sha256tree epoch_end)
                    ) 
                )
                (c
                    ; condition prepended with -42 -> condition will be returned by the reserve
                    (list -42
                        CREATE_COIN
                        FEE_PAYOUT_PUZZLE_HASH
                        fee
                        (list FEE_PAYOUT_PUZZLE_HASH)
                    )
                    (slot_oracle REWARD_SLOT_1ST_CURRY_HASH
                        (sha256 2
                            (sha256 1 slot_epoch_time)
                            (sha256 2
                                (sha256 1 slot_next_epoch_initialized)
                                (sha256 1 slot_total_rewards)
                            )
                        ) ; (sha256tree (epoch_time next_epoch_initialized . total_rewards))
                        (sha256 1 slot_epoch_time)
                    )
                )
            ) ; conditions
        )
        ; else
        (x)
    )
)