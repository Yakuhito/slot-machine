; stake.clsp by yakuhito
;; Stakes an NFT to add an entry to the reward distributor.

(mod (
    (@ DID_SINGLETON_STRUCT (SINGLETON_MOD_HASH DID_LAUNCHER_ID . SINGLETON_LAUNCHER_HASH))
    NFT_STATE_LAYER_MOD_HASH
    NFT_OWNERSHIP_LAYER_MOD_HASH
    OFFER_MOD_HASH
    NONCE_MOD_HASH
    MY_P2_PUZZLE_HASH
    ENTRY_SLOT_1ST_CURRY_HASH ; after 1st curry
    MAX_SECONDS_OFFSET ; at most this amount of seconds can pass since last update
    ; /\ this prevents someone from 'stealing' earned rewards before MAX_SECONDS_OFFSET by
    ;    staking a bunch of NFTs after long periods of non-sync
    (
        Ephemeral_State .
        (@
            Current_State
            (
                total_reserves
                active_shares
                (@ Reward_Info (cumulative_payout . remaining_rewards))
                (@ Round_Time_Info (last_update . epoch_end))
            )
        )
    ) ; Truth
    (
        my_id
        nft_metadata_hash
        nft_metadata_updater_hash_hash
        nft_transfer_porgram_hash
        nft_launcher_proof .
        entry_custody_puzzle_hash
    )
)
    (include condition_codes.clib)
    (include sha256tree.clib)
    (include curry.clib)
    (include slots.clib)

    (defun notarized_payment (ph)
        (list ph 1 (list ph))
    )

    (defun nft_lancher_id (did_coin_id (@ nft_launcher_proof ((proof_puzzle_hash . proof_amount) . nft_launcher_proof_rest)))
        (if nft_launcher_proof
            (coinid
                (nft_lancher_id did_coin_id nft_launcher_proof_rest)
                proof_puzzle_hash
                proof_amount
            )
            ; else
            did_coin_id
        )
    )

    (defun-inline nft_lancher_id_stager (((did_parent_info did_inner_ph did_amount) . nft_launcher_proof))
        (nft_lancher_id
            (coinid
                did_parent_info
                (curry_hashes SINGLETON_MOD_HASH
                    (sha256tree DID_SINGLETON_STRUCT)
                    did_inner_ph
                )
                did_amount
            )
            nft_launcher_proof
        )
    )

    (defun add_announcement_assert_and_create_security_condition (ann conditions)
        (c
            (list ASSERT_PUZZLE_ANNOUNCEMENT ann)
            (c
                (list CREATE_PUZZLE_ANNOUNCEMENT ann)
                conditions
            )
        )
    )

    (c
        (list
            (+ Ephemeral_State 1)
            total_reserves
            (+ active_shares 1)
            Reward_Info
            Round_Time_Info
        ) ; new state
        (add_announcement_assert_and_create_security_condition
            (sha256
                (curry_hashes SINGLETON_MOD_HASH
                    (sha256tree
                        (c SINGLETON_MOD_HASH (c (nft_lancher_id_stager nft_launcher_proof) SINGLETON_LAUNCHER_HASH))
                    )
                    (curry_hashes NFT_STATE_LAYER_MOD_HASH
                        (sha256 1 NFT_STATE_LAYER_MOD_HASH)
                        nft_metadata_hash
                        nft_metadata_updater_hash_hash  
                        (curry_hashes NFT_OWNERSHIP_LAYER_MOD_HASH
                            (sha256 1 NFT_OWNERSHIP_LAYER_MOD_HASH)
                            (sha256_one)
                            nft_transfer_porgram_hash
                            OFFER_MOD_HASH
                        )
                    )
                ) ; NFT puzzle hash
                (sha256tree 
                    (list
                        (sha256tree (c Ephemeral_State my_id)) ; nonce
                        (notarized_payment (curry_hashes NONCE_MOD_HASH
                            (sha256 1 entry_custody_puzzle_hash)
                            MY_P2_PUZZLE_HASH
                        ))
                    )
                )
            )
            (list
                (list ASSERT_MY_COIN_ID my_id)

                (create_slot_with_hint ENTRY_SLOT_1ST_CURRY_HASH
                    (sha256tree
                        (c entry_custody_puzzle_hash (c cumulative_payout 1))
                    ) ; slot value = (payout_puzzle_hash initial_cumulative_payout . shares)
                    entry_custody_puzzle_hash
                )

                ; make sure the reward info is up to date
                (list ASSERT_BEFORE_SECONDS_ABSOLUTE (+ last_update MAX_SECONDS_OFFSET))
            )
        ) ; conditions
    )
)