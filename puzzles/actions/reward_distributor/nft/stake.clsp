; stake.clsp by yakuhito
;; Stakes an NFT to add an entry to the reward distributor.

(mod (
    (SINGLETON_MOD_HASH DID_LAUNCHER_ID . SINGLETON_LAUNCHER_HASH) ; DID singleton struct
    NONCE_MOD_HASH
    MY_P2_PUZZLE_HASH
    ENTRY_SLOT_1ST_CURRY_HASH ; after 1st curry
    MAX_SECONDS_OFFSET ; at most this amount of seconds can pass since last update
    ; /\ this prevents someone from 'stealing' earned rewards before MAX_SECONDS_OFFSET by
    ;    adding a mirror with a gazillion shares during long periods of non-sync
    (
        Ephemeral_State . ; not used
        (@
            Current_State
            (
                total_reserves
                active_shares
                (@ Reward_Info (cumulative_payout . remaining_rewards))
                (@ Round_Time_Info (last_update . epoch_end))
            )
        )
    ) ; Truth
    (
        my_id
        nft_launcher_proof
        manager_singleton_inner_puzzle_hash
        entry_custody_puzzle_hash
    )
)
    (include condition_codes.clib)
    (include curry.clib)
    (include slots.clib)

    (defun notarized_payment (ph)
        (list ph 1 (list ph))
    )

    (c
        (list
            (+ Ephemeral_State 1)
            total_reserves
            (+ active_shares 1)
            Reward_Info
            Round_Time_Info
        ) ; new state
        (list
            (list ASSERT_MY_COIN_ID my_id)

            ; NFT has been locked
            (list
                ASSERT_PUZZLE_ANNOUNCEMENT
                (sha256
                    (curry_hashes_inline SINGLETON_MOD_HASH
                        (sha256tree
                            (c SINGLETON_MOD_HASH (c (nft_lancher_id nft_launcher_proof) SINGLETON_LAUNCHER_HASH))
                        )
                        TODO_NFT_INNER_PH
                    ) ; NFT puzzle hash
                    (sha256tree 
                        (list
                            (sha256tree (c Ephemeral_State my_id)) ; nonce
                            (notarized_payment (curry_hashes_inline NONCE_MOD_HASH
                                (sha256 1 entry_custody_puzzle_hash)
                                MY_P2_PUZZLE_HASH
                            ))
                        )
                    )
                )
            )

            (create_slot_inline ENTRY_SLOT_1ST_CURRY_HASH
                (sha256 2
                    (sha256 1 entry_custody_puzzle_hash)
                    (sha256 2
                        (sha256 1 cumulative_payout)
                        (sha256 1 1)
                    )
                ) ; slot value = (payout_puzzle_hash initial_cumulative_payout . shares)
                entry_custody_puzzle_hash
            )

            ; make sure the reward info is up to date
            (list ASSERT_BEFORE_SECONDS_ABSOLUTE (+ last_update MAX_SECONDS_OFFSET))
        ) ; conditions
    )
        
)