; withdraw_incentives.clsp by yakuhito
;; Withdraw incentives from a future epoch

(mod (
    REWARD_SLOT_1ST_CURRY_HASH ; after 1st curry
    COMMITMENT_SLOT_1ST_CURRY_HASH ; after 1st curry
    WITHDRAWAL_SHARE_BPS ; / 10000 * committed_value will actually be sent to the recipient
    (
        Ephemeral_State . ; not used
        (@ Current_State (total_reserves . Current_State_Rest)) 
    ) ; Truth
    (
        reward_slot_epoch_time
        reward_slot_next_epoch_initialized
        reward_slot_total_rewards
        clawback_ph
        committed_value .
        withdrawal_share
    )
)
    (include condition_codes.clib)
    (include curry.clib)
    (include slots.clib)

    (defun get_slot_data_hash (first second third)
        (sha256 2
            (sha256 1 first)
            (sha256 2
                (sha256 1 second)
                (sha256 1 third)
            )
        ) ; e.g., (sha256tree (epoch_time next_epoch_time . total_rewards))
    )
    
    (c
        (c
            Ephemeral_State ; new ephemeral state
            (c
                (- total_reserves 
                    (if (= withdrawal_share (/ (* WITHDRAWAL_SHARE_BPS committed_value) 10000)) withdrawal_share (x))
                )
                Current_State_Rest
            ) ; new state
        )
        (list
            ; this also ensures that the wihdrawal doesn't affect the current round
            (list ASSERT_BEFORE_SECONDS_ABSOLUTE reward_slot_epoch_time)

            ; update epoch reward (lower total rewards)
            (spend_slot_inline REWARD_SLOT_1ST_CURRY_HASH
                (get_slot_data_hash reward_slot_epoch_time reward_slot_next_epoch_initialized reward_slot_total_rewards)
            )

            (create_slot_with_hint_inline REWARD_SLOT_1ST_CURRY_HASH
                (get_slot_data_hash
                    reward_slot_epoch_time
                    reward_slot_next_epoch_initialized
                    (- reward_slot_total_rewards withdrawal_share)
                )
                (sha256 1 reward_slot_epoch_time)
            )

            ; spend commitment slot, which functions as a ticket
            (spend_slot_inline COMMITMENT_SLOT_1ST_CURRY_HASH
                (get_slot_data_hash reward_slot_epoch_time clawback_ph committed_value)
            )

            ; make sure the clawback owner wants to go ahead
            (list RECEIVE_MESSAGE
                18 ; puzzle hash - puzzle hash
                () ; message
                clawback_ph
            )

            ; conditions with '-42' will be outputed by the reserve coin
            (list -42 CREATE_COIN clawback_ph withdrawal_share (list clawback_ph))
        ) ; conditions
    )
        
)