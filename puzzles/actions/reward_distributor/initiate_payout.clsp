; initiate_payout.clsp by yakuhito
;; Initiates a payout for a mirror.

(mod (
    ENTRY_SLOT_1ST_CURRY_HASH ; after 1st curry
    PAYOUT_THRESHOLD ; to prevent spam, payout needs to be >= PAYOUT_THRESHOLD
    (
        Ephemeral_State . ; not used
        (@
            Current_State
            (
                total_reserves .
                (@ Current_State_Rest (
                    active_shares
                    (@ Reward_Info (cumulative_payout . remaining_rewards))
                    Round_Time_Info
                ))
            )
        )
    ) ; Truth
    (
        entry_payout_amount
        entry_payout_puzzle_hash
        entry_initial_cumulative_payout .
        entry_shares
    )
)
    (include condition_codes.clib)
    (include curry.clib)
    (include slots.clib)

    (defun get_slot_data_hash (payout_puzzle_hash cumulative_payout shares)
        (sha256 2
            (sha256 1 payout_puzzle_hash)
            (sha256 2
                (sha256 1 cumulative_payout)
                (sha256 1 shares)
            )
        ) ; slot value = (payout_puzzle_hash initial_cumulative_payout . shares)
    )

    (if (all
        (= (* (- cumulative_payout entry_initial_cumulative_payout) entry_shares) entry_payout_amount)
        (not (> PAYOUT_THRESHOLD entry_payout_amount))
    )
        (c
            (c 
                Ephemeral_State ; new ephemeral state
                (c
                    (- total_reserves entry_payout_amount)
                    Current_State_Rest
                ) ; new state
            ) 
            (list
                (spend_slot_inline ENTRY_SLOT_1ST_CURRY_HASH
                    (get_slot_data_hash entry_payout_puzzle_hash entry_initial_cumulative_payout entry_shares)
                )

                (create_slot_with_hint_inline ENTRY_SLOT_1ST_CURRY_HASH
                    (get_slot_data_hash entry_payout_puzzle_hash cumulative_payout entry_shares)
                    entry_payout_puzzle_hash
                )

                (list CREATE_PUZZLE_ANNOUNCEMENT
                    (concat 'p'
                        (sha256 2
                            (sha256 1 entry_payout_puzzle_hash)
                            (sha256 1 entry_payout_amount)
                        ) ; (sha256tree (c entry_payout_puzzle_hash entry_payout_amount))
                    ) 
                )

                ; leading -42 -> condition will be returned by the reserve
                (list -42
                    CREATE_COIN
                    entry_payout_puzzle_hash
                    entry_payout_amount
                    (list entry_payout_puzzle_hash)
                )
            ) ; conditions
        )
        ; esle
        (x)
    )
)