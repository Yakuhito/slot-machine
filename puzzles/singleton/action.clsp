; action.clsp by yakuhito
;; Inner puzzle for a singleton that has a state and may run any of n actions
;; Each action will receive the current state/list of output conditions and return new values
;; One or more actions may be run per spend

;; An action's solution will always be: (list Current_State solution)
;;  (where capital first letters are used to denote Truths)
;; It returns two values: (c new_state new_conditions)
;;  new_conditions will be directly aded to this puzzle's output conditions
;;  but the finalizer puzzle is able to filter them after all actions are run

;; Warning: This puzzle's finalizer may assume the singleton's amount is 1 (like the default one does).

(mod (
  FINALZIER
  MERKLE_ROOT
  STATE
  actions ; (list (proof puzzle . solution) ...)
  finalizer_solution
)
  (include merkle_utils.clib)
  (include sha256tree.clib)

  (defun merge_lists (short_list long_list)
    (if short_list
      (c (f short_list) (merge_lists (r short_list) long_list))
      long_list
    )
  )

  (defun merge_conditions (short_list (state . long_list))
    (c state (merge_lists short_list long_list))
  )

  (defun run_actions (
    MERKLE_ROOT
    (state . conditions)
    remaining_actions
  )
    (if remaining_actions
      ; (f remaining_actions) = (proof puzzle . solution)
      (if (= MERKLE_ROOT (simplify_merkle_proof (sha256tree (f (r (f remaining_actions)))) (f (f remaining_actions))))
        (merge_conditions 
          conditions
          (run_actions
            MERKLE_ROOT
            (a
              (f (r (f remaining_actions)))
              (list state (r (r (f remaining_actions))))
            )
            (r remaining_actions)
          )
        )
        ; else
        (x)
      )
      ; else
      (c
        state
        conditions
      )
    )
  )
  
  (a
    FINALZIER
    (list
      MERKLE_ROOT
      STATE
      (run_actions MERKLE_ROOT (list STATE) actions)
      finalizer_solution
    )
  )
)
