; slot.clsp by yakuhito
;; A singleton slot coin is created to store values that may be read at a later spend
;; To read the values, the singleton will spend the slot coin - so the values are only readable once
;; Might be helpful to think of this as a one-time ticket 

;; Warning: Slots do not assure uniqueness - a double-linked sorted list structure on top is required for that
;;          An attacker might intentionally omit a given slot to trick the dApp that it doesn't exist
;;          For example, a naive handle reigstration app might be tricked into registering the same handle twice

;; Warning 2: This puzzle assumes the controller singleton has an amount of 1.

(mod (
      ; 1st curry
      SINGLETON_STRUCT ; owner/controller singleton
      NONCE ; different nonces will hold different data types
      ; 2nd curry
      VALUE_HASH
      ; info about this coin's parent (previous singleton coin)
      parent_parent_info
      parent_inner_puzzle_hash
      ; info about this coin's spender (current singleton coin - the one consuming the value)
      spender_inner_puzzle_hash
)

    (include condition_codes.clib)
    (include sha256tree.clib)
    (include curry.clib)

    (defun singleton_full_puzzle_hash (SINGLETON_STRUCT inner_puzzle_hash)
        (curry_hashes_inline (f SINGLETON_STRUCT)
            (sha256tree SINGLETON_STRUCT)
            inner_puzzle_hash
        )
    )

    (list 
        (list ASSERT_MY_PARENT_ID
            (coinid parent_parent_info (singleton_full_puzzle_hash SINGLETON_STRUCT parent_inner_puzzle_hash) 1)
        )
        (list RECEIVE_MESSAGE 18 () (singleton_full_puzzle_hash SINGLETON_STRUCT spender_inner_puzzle_hash)) ; puzzle-puzzle
    )
)
