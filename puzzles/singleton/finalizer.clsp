; finalizer.clsp by yakuhito
;; This puzzle is essentially used in the singleton action layer to 'finalize' a set of actions
;; The current one only re-creates the singleton, but advanced dApps could use it to create other
;;  conditions based on the final state - e.g., re-create the singleton's reserves or modify merkle root

;; Note: This finalizer assumes sets the next singleton's amount to 1.

(mod (
    ACTION_LAYER_MOD_HASH
    HINT
    FINALIZER_SELF_HASH
    Merkle_Root
    Initial_State ; not used for this puzzle
    ((Last_Ephemeral_State . New_State) . Conditions) ; last action output
    my_solution ; not used here
)
    (include condition_codes.clib)
    (include sha256tree.clib)
    (include curry.clib)

    (defun flatten_list (((@ first_thing (first_cond . remaining_conds)) . the_rest))
        (if first_thing
            (c first_cond (flatten_list (c remaining_conds the_rest)))
            ; else
            (if the_rest
                (flatten_list the_rest)
                ; else
                ()
            )
        )
    )

    (c
        (list
            CREATE_COIN
            (curry_hashes ACTION_LAYER_MOD_HASH
                (curry_hashes FINALIZER_SELF_HASH
                    (sha256 1 FINALIZER_SELF_HASH)
                ) ; finalizer puzzle hash
                (sha256 1 Merkle_Root)
                (sha256tree New_State)
            ) ; new inner ph
            1
            (list HINT)
        )
        (flatten_list Conditions)
    )
)